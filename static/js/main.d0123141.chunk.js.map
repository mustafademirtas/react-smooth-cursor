{"version":3,"sources":["../../src/Cursor/index.ts","../../src/Cursor/utils.ts","../../src/CursorShapes/AlienShape.tsx","../../src/CursorShapes/CircleShape.tsx","../../src/CursorShapes/SquareShape.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["Cursor","constructor","el","smootness","endScale","endOpacity","enter","leave","render","a","n","previous","requestAnimationFrame","this","x","y","window","ev","e","posx","posy","document","getMousePos","DOM","smoothness","tx","current","amt","ty","scale","opacity","gsap","duration","ease","AlienShape","forwardRef","mWidth","props","mHeight","ref","className","styles","width","height","viewBox","d","fill","fillColor","stroke","strokeColor","strokeWidth","CircleShape","radius","cx","cy","r","SquareShape","size","cursorRef","React","mRadius","circleRadius","mShape","shape","mFillColor","mStrokeColor","mStrokeWidth","mShapeSize","shapeSize","mCursor","cursor","bindClasses","bindClass","item","bindCursorEvent","unbindCursorEvent","renderShape","App","useState","cursorType","setCursorType","onClick","style","backgroundColor","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.d0123141.chunk.js","sourcesContent":["import { gsap } from 'gsap'\nimport { lerp, getMousePos } from './utils'\n\nexport default class Cursor {\n  DOM: { el: SVGSVGElement }\n  bounds: DOMRect\n  onMouseMoveEv: () => void\n  smoothness: number\n  endScale: number\n  endOpacity: number\n  mouse: { x: number; y: number }\n  renderedStyles: {\n    tx: { previous: number; current: number; amt: number }\n    ty: { previous: number; current: number; amt: number }\n    scale: { previous: number; current: number; amt: number }\n    opacity: { previous: number; current: number; amt: number }\n  }\n\n  constructor(\n    el: SVGSVGElement,\n    smootness?: number,\n    endScale?: number,\n    endOpacity?: number\n  ) {\n    // Assign mouse positon initial value\n    this.mouse = { x: 0, y: 0 }\n\n    // Add \"mousemove\" event to window\n    window.addEventListener('mousemove', (ev) => (this.mouse = getMousePos(ev)))\n\n    this.DOM = { el: el }\n    this.DOM.el.style.opacity = '0'\n    this.smoothness = smootness || 0.2\n    this.endScale = endScale || 4\n    this.endOpacity = endOpacity || 0.2\n\n    this.bounds = this.DOM.el.getBoundingClientRect()\n\n    if (smootness) {\n      if (smootness > 1) this.smoothness = 1\n      else if (smootness < 0) this.smoothness = 0\n      else this.smoothness = smootness\n    }\n\n    if (endOpacity) {\n      if (endOpacity > 1) this.endOpacity = 1\n      else if (endOpacity < 0) this.endOpacity = 0\n      else this.endOpacity = endOpacity\n    }\n\n    if (endScale) {\n      if (endScale < 1) this.endScale = 1\n    }\n\n    this.renderedStyles = {\n      tx: { previous: 0, current: 0, amt: this.smoothness },\n      ty: { previous: 0, current: 0, amt: this.smoothness },\n      scale: { previous: 1, current: 1, amt: this.smoothness },\n      opacity: { previous: 1, current: 1, amt: this.smoothness }\n    }\n\n    this.onMouseMoveEv = () => {\n      this.renderedStyles.tx.previous = this.renderedStyles.tx.current =\n        this.mouse.x - this.bounds.width / 2\n      this.renderedStyles.ty.previous = this.renderedStyles.ty.previous =\n        this.mouse.y - this.bounds.height / 2\n      gsap.to(this.DOM.el, {\n        duration: 0.9,\n        ease: 'Power3.easeOut',\n        opacity: 1\n      })\n      requestAnimationFrame(() => this.render())\n      window.removeEventListener('mousemove', this.onMouseMoveEv)\n    }\n\n    window.addEventListener('mousemove', this.onMouseMoveEv)\n  }\n\n  enter = () => {\n    this.renderedStyles.scale.current = this.endScale\n    this.renderedStyles.opacity.current = this.endOpacity\n  }\n\n  leave = () => {\n    this.renderedStyles.scale.current = 1\n    this.renderedStyles.opacity.current = 1\n  }\n\n  render = () => {\n    this.renderedStyles.tx.current = this.mouse.x - this.bounds.width / 2\n    this.renderedStyles.ty.current = this.mouse.y - this.bounds.height / 2\n\n    for (const key in this.renderedStyles) {\n      this.renderedStyles[key].previous = lerp(\n        this.renderedStyles[key].previous,\n        this.renderedStyles[key].current,\n        this.renderedStyles[key].amt\n      )\n    }\n\n    this.DOM.el.style.transform = `translateX(${this.renderedStyles.tx.previous}px) translateY(${this.renderedStyles.ty.previous}px) scale(${this.renderedStyles.scale.previous})`\n    this.DOM.el.style.opacity = this.renderedStyles.opacity.previous.toString()\n\n    requestAnimationFrame(() => this.render())\n  }\n}\n","// Map number x from range [a, b] to [c, d]\nconst map = (x: number, a: number, b: number, c: number, d: number) =>\n  ((x - a) * (d - c)) / (b - a) + c\n\n// Linear interpolation\nconst lerp = (a: number, b: number, n: number) => (1 - n) * a + n * b\n\nconst calcWinsize = () => {\n  return { width: window.innerWidth, height: window.innerHeight }\n}\n\n// Gets the mouse position\nconst getMousePos = (e: any) => {\n  let posx = 0\n  let posy = 0\n  if (!e) e = window.event\n  if (e.pageX || e.pageY) {\n    posx = e.pageX\n    posy = e.pageY\n  } else if (e.clientX || e.clientY) {\n    posx =\n      e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft\n    posy =\n      e.clientY + document.body.scrollTop + document.documentElement.scrollTop\n  }\n\n  return { x: posx, y: posy }\n}\n\nconst distance = (x1: number, y1: number, x2: number, y2: number) => {\n  var a = x1 - x2\n  var b = y1 - y2\n\n  return Math.hypot(a, b)\n}\n\n// Generate a random float.\nconst getRandomFloat = (min: number, max: number) =>\n  (Math.random() * (max - min) + min).toFixed(2)\n\nexport { map, lerp, calcWinsize, getMousePos, distance, getRandomFloat }\n","import React, { forwardRef } from 'react'\nimport styles from '../styles.module.css'\n\ninterface Props {\n  size?: number\n  fillColor: string\n  strokeColor: string\n  strokeWidth: number\n}\n\nconst AlienShape = forwardRef<SVGSVGElement, Props>((props, ref) => {\n  const mWidth = props.size || 92.52\n  const mHeight = mWidth * (122.88 / 92.52)\n\n  return (\n    <svg\n      ref={ref}\n      className={`${styles.cursor} cursor`}\n      width={`${mWidth}`}\n      height={`${mHeight}`}\n      viewBox='0 0 92.52 122.88'\n    >\n      <g>\n        <path\n          d='M13.51,12.7c2.25-2.18,4.65-4.07,7.17-5.67c9.21-5.85,20.07-7.97,30.52-6.66c10.45,1.31,20.51,6.05,28.14,13.9 c2.17,2.23,4.13,4.7,5.85,7.4c5.23,8.23,7.32,15.71,7.33,23.33c0.01,7.53-2.02,15.08-5.04,23.59c-2.25,6.34-7.2,17.13-12.38,26.84 c-4.33,8.11-8.85,15.52-12.15,19.05c-4.39,4.69-9.67,7.92-15.54,8.35c-5.09,0.37-10.55-1.36-16.13-6.07 c-4.01-3.39-8.45-10.01-12.58-17.47C12.95,88.91,7.76,76.86,5.22,69.89C1.56,59.83-0.65,49.77,0.17,40.13 C1,30.35,4.91,21.06,13.51,12.7L13.51,12.7z M69.29,61.23c-12,4.64-21.48,18.53-18.82,28.79c4.42-0.28,8.09-1.64,11.69-3.64 c3.44-1.92,10.35-8.51,14.5-14.67C83.32,61.82,79.49,57.28,69.29,61.23L69.29,61.23z M22.33,61.23c12,4.64,21.48,18.53,18.82,28.79 c-4.42-0.28-8.09-1.64-11.69-3.64c-3.44-1.92-10.35-8.51-14.5-14.67C8.29,61.82,12.12,57.28,22.33,61.23L22.33,61.23z M22.62,10.08 c-2.33,1.48-4.54,3.21-6.59,5.21C8.13,22.97,4.54,31.48,3.78,40.42c-0.77,9.07,1.34,18.63,4.84,28.24 c2.5,6.86,7.6,18.71,13.24,28.89c3.93,7.1,8.1,13.36,11.76,16.45c4.78,4.03,9.35,5.53,13.54,5.22c4.88-0.36,9.37-3.14,13.16-7.2 c3.07-3.28,7.4-10.41,11.6-18.29C77,84.2,81.86,73.61,84.07,67.39c2.9-8.18,4.85-15.38,4.84-22.39 c-0.01-6.93-1.94-13.78-6.78-21.39c-1.59-2.51-3.4-4.78-5.38-6.82C69.72,9.55,60.42,5.18,50.76,3.97 C41.11,2.75,31.1,4.7,22.62,10.08L22.62,10.08z'\n          className={`${styles.cursor} cursor__inner`}\n          fill={props.fillColor}\n          stroke={props.strokeColor}\n          strokeWidth={props.strokeWidth}\n        />\n      </g>\n    </svg>\n  )\n})\n\nexport default AlienShape\n","import React, { forwardRef } from 'react'\nimport styles from '../styles.module.css'\n\ninterface Props {\n  radius: number\n  fillColor: string\n  strokeColor: string\n  strokeWidth: number\n}\n\nconst CircleShape = forwardRef<SVGSVGElement, Props>((props, ref) => {\n  const { radius, fillColor, strokeColor, strokeWidth } = props\n  return (\n    <svg\n      ref={ref}\n      className={`${styles.cursor} cursor`}\n      width={`${radius}`}\n      height={`${radius}`}\n      viewBox={`0 0 ${radius} ${radius}`}\n    >\n      <circle\n        className={`${styles.cursor} cursor__inner`}\n        cx={`${radius / 2}`}\n        cy={`${radius / 2}`}\n        r={`${radius / 4}`}\n        fill={fillColor}\n        stroke={strokeColor}\n        strokeWidth={strokeWidth}\n      />\n    </svg>\n  )\n})\n\nexport default CircleShape\n","import React, { forwardRef } from 'react'\nimport styles from '../styles.module.css'\n\ninterface Props {\n  size: number\n  fillColor: string\n  strokeColor: string\n  strokeWidth: number\n}\n\nconst SquareShape = forwardRef<SVGSVGElement, Props>((props, ref) => {\n  const { size, fillColor, strokeColor, strokeWidth } = props\n  return (\n    <svg\n      ref={ref}\n      className={`${styles.cursor} cursor`}\n      width={`${size}`}\n      height={`${size}`}\n      viewBox={`0 0 ${size} ${size}`}\n    >\n      <rect\n        width={`${size}`}\n        height={`${size}`}\n        fill={fillColor}\n        stroke={strokeColor}\n        strokeWidth={strokeWidth}\n        className={`${styles.cursor} cursor__inner`}\n      />\n    </svg>\n  )\n})\n\nexport default SquareShape\n","import * as React from 'react'\nimport Cursor from './Cursor'\nimport { AlienShape, CircleShape, SquareShape } from './CursorShapes'\n// import styles from './styles.module.css'\n\nconst bindCursorEvent = (cursor: Cursor, bindClasses: string[]) => {\n  if (!bindClasses) return\n  bindClasses.forEach((bindClass) => {\n    document.querySelectorAll('.' + bindClass).forEach((item) => {\n      item.addEventListener('mouseenter', cursor.enter)\n    })\n    document.querySelectorAll('.' + bindClass).forEach((item) => {\n      item.addEventListener('mouseleave', cursor.leave)\n    })\n  })\n}\n\nconst unbindCursorEvent = (cursor: Cursor, bindClasses: string[]) => {\n  if (!bindClasses) return\n  bindClasses.forEach((bindClass) => {\n    document.querySelectorAll('.' + bindClass).forEach((item) => {\n      item.removeEventListener('mouseenter', cursor.enter)\n    })\n    document.querySelectorAll('.' + bindClass).forEach((item) => {\n      item.removeEventListener('mouseleave', cursor.leave)\n    })\n  })\n}\n\nexport interface SmoothCursorProps {\n  shape?: 'circle' | 'square' | 'alien'\n  bindClasses?: string[]\n  fillColor?: string\n  strokeColor?: string\n  strokeWidth?: number\n  smoothness?: number\n  endScale?: number\n  endOpacity?: number\n\n  circleRadius?: number\n  shapeSize?: number\n}\n\nconst SmoothCursor = ({\n  shape,\n  bindClasses,\n  fillColor,\n  strokeColor,\n  strokeWidth,\n  circleRadius,\n  smoothness,\n  shapeSize,\n  endScale,\n  endOpacity\n}: SmoothCursorProps) => {\n  const cursorRef = React.useRef<SVGSVGElement>()\n  const mRadius = circleRadius || 25\n  const mShape = shape || 'circle'\n\n  const mFillColor = fillColor || '#fff'\n  const mStrokeColor = strokeColor || '#000'\n  const mStrokeWidth = strokeWidth || 1\n\n  const mShapeSize = shapeSize || 25\n\n  React.useEffect(() => {\n    if (!cursorRef) return null\n\n    const mCursor = new Cursor(\n      cursorRef.current,\n      smoothness,\n      endScale,\n      endOpacity\n    )\n\n    bindCursorEvent(mCursor, bindClasses)\n    return () => {\n      unbindCursorEvent(mCursor, bindClasses)\n    }\n  }, [cursorRef])\n\n  const renderShape = () => {\n    switch (mShape) {\n      case 'circle':\n        return (\n          <CircleShape\n            ref={cursorRef}\n            radius={mRadius}\n            fillColor={mFillColor}\n            strokeColor={mStrokeColor}\n            strokeWidth={mStrokeWidth}\n          />\n        )\n      case 'square':\n        return (\n          <SquareShape\n            ref={cursorRef}\n            size={mShapeSize}\n            fillColor={mFillColor}\n            strokeColor={mStrokeColor}\n            strokeWidth={mStrokeWidth}\n          />\n        )\n      case 'alien':\n        return (\n          <AlienShape\n            ref={cursorRef}\n            size={mShapeSize}\n            fillColor={mFillColor}\n            strokeColor={mStrokeColor}\n            strokeWidth={mStrokeWidth}\n          />\n        )\n      default:\n        return (\n          <CircleShape\n            ref={cursorRef}\n            radius={mRadius}\n            fillColor={mFillColor}\n            strokeColor={mStrokeColor}\n            strokeWidth={mStrokeWidth}\n          />\n        )\n    }\n  }\n\n  return <React.Fragment>{renderShape()}</React.Fragment>\n}\n\nexport default SmoothCursor\n","import React, { Fragment, useState } from 'react'\nimport SmoothCursor from 'react-smooth-cursor'\nimport 'react-smooth-cursor/dist/index.css'\n\nconst App = () => {\n  const [cursorType, setCursorType] = useState<'circle' | 'square' | 'alien'>(\n    'circle'\n  )\n  return (\n    <Fragment>\n      <div className='multi-button'>\n        <button\n          className={`${cursorType === 'square' ? 'active' : ''}`}\n          onClick={() => setCursorType('square')}\n        >\n          Square\n        </button>\n        <button\n          className={`${cursorType === 'circle' ? 'active' : ''}`}\n          onClick={() => setCursorType('circle')}\n        >\n          Circle\n        </button>\n        <button\n          className={`${cursorType === 'alien' ? 'active' : ''}`}\n          onClick={() => setCursorType('alien')}\n        >\n          Alien\n        </button>\n      </div>\n      <div\n        className='playground'\n        style={{ width: '200px', height: '200px', backgroundColor: '#ddd' }}\n      >\n        <span>Move cursor here</span>\n      </div>\n      {cursorType === 'circle' && (\n        <SmoothCursor\n          bindClasses={['playground']}\n          fillColor='#e20c6a'\n          strokeColor='#000'\n          strokeWidth={1}\n          circleRadius={25}\n          shape='circle'\n        />\n      )}\n      {cursorType === 'square' && (\n        <SmoothCursor\n          bindClasses={['playground']}\n          fillColor='#e20c6a'\n          strokeColor='#000'\n          strokeWidth={1}\n          shape='square'\n          shapeSize={15}\n        />\n      )}\n      {cursorType === 'alien' && (\n        <SmoothCursor\n          bindClasses={['playground']}\n          fillColor='#e20c6a'\n          strokeColor='#000'\n          strokeWidth={1}\n          shape='alien'\n        />\n      )}\n    </Fragment>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}