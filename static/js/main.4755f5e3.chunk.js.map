{"version":3,"sources":["../../src/Cursor/index.ts","../../src/Cursor/utils.ts","../../src/index.tsx","App.tsx","index.tsx"],"names":["mouse","x","y","window","e","posx","posy","document","getMousePos","Cursor","enter","leave","render","a","n","requestAnimationFrame","this","el","DOM","smoothness","smootness","tx","previous","current","amt","ty","scale","opacity","gsap","duration","ease","shape","bindClasses","fillColor","strokeColor","strokeWidth","circleRadius","squareSize","cursorRef","React","mRadius","mSize","mShape","mSmoothness","mCursor","cursor","item","bindCursorEvent","unbindCursorEvent","ref","className","styles","width","height","viewBox","cx","cy","r","fill","stroke","renderShape","App","style","backgroundColor","ReactDOM","getElementById"],"mappings":"kRAIIA,EAAQ,CAAEC,EAAF,EAAQC,EAAG,GACvBC,qCAAqC,mBAASH,ECO1B,SAACI,GACnB,IAAIC,EAAJ,EACIC,EAAJ,EAYA,OAXA,IAAQF,EAAID,OAAJC,OACJA,SAAWA,EAAf,OACEC,EAAOD,EAAPC,MACAC,EAAOF,EAAPE,QACSF,WAAaA,EAAjB,WACLC,EACED,UAAYG,cAAZH,WAAuCG,yBADzCF,WAEAC,EACEF,UAAYG,cAAZH,UAAsCG,yBADxCD,WAIK,CAAEL,EAAF,EAAWC,EAAGI,GDrB+BE,CAAjB,M,IAEhBC,EAanB,c,WAmCA,KAAAC,MAAQ,WACN,iCACA,qCAGF,KAAAC,MAAQ,WACN,iCACA,oCAGF,KAAAC,OAAS,WAIP,IAAK,IAAL,KAHA,4BAAiCZ,IAAU,eAA3C,EACA,4BAAiCA,IAAU,gBAA3C,EAEkB,EAAlB,eACE,8BCjEQa,EDkEN,oBADsC,SCjEjC,EDmEL,oBAFsC,SCjEK,GAAtC,EDoEL,oBAHF,MCjE4C,EAAcC,EAAnD,OAACD,EAAD,IDwET,uCAA4C,oBAA5C,2BAA6F,oBAA7F,sBAAyI,uBAAzI,aACA,uBAA4B,yBAA5B,SAEAE,uBAAsB,kBAAM,EAAN,aA3DtBC,KAAA,IAAW,CAAEC,GAAIA,GACjBD,KAAA,uBACAA,KAAA,cAEAA,KAAA,OAAcA,KAAKE,IAAID,GAAvB,wBAEmBD,KAAKG,WAApBC,EAAJ,IACSA,EAAJ,IACkBA,EAEvBJ,KAAA,eAAsB,CACpBK,GAAI,CAAEC,SAAF,EAAeC,QAAf,EAA2BC,IAAKR,KAAKG,YACzCM,GAAI,CAAEH,SAAF,EAAeC,QAAf,EAA2BC,IAAKR,KAAKG,YACzCO,MAAO,CAAEJ,SAAF,EAAeC,QAAf,EAA2BC,IAAKR,KAAKG,YAC5CQ,QAAS,CAAEL,SAAF,EAAeC,QAAf,EAA2BC,IAAKR,KAAKG,aAGhDH,KAAA,cAAqB,WACnB,6BAAkC,4BAChChB,IAAU,eADZ,EAEA,6BAAkC,6BAChCA,IAAU,gBADZ,EAEA4B,OAAQ,MAARA,GAAqB,CACnBC,SADmB,GAEnBC,KAFmB,iBAGnBH,QAAS,IAEXZ,uBAAsB,kBAAM,EAAN,YACtBZ,uCAAwC,EAAxCA,gBAGFA,oCAAqCa,KAArCb,gB,aEZiB,SAAC,G,IACpB4B,UACAC,gBACAC,cACAC,gBACAC,gBACAC,iBACAC,eACAlB,eAEMmB,EAAYC,mBACZC,EAAUJ,GAAhB,GACMK,EAAQJ,GAAd,GACMK,EAASX,GAAf,SACMY,EAAcxB,GAApB,GAEAoB,qBAAgB,WACd,MAAgB,OAAO,KAEvB,IAAMK,EAAU,IAAI,EAAON,EAAX,QAAhB,GAGA,OA1DoB,SAACO,EAAD,GACtB,GACAb,WAAoB,YAClBzB,0BAA0B,IAA1BA,YAAmD,YACjDuC,gCAAoCD,EAApCC,UAEFvC,0BAA0B,IAA1BA,YAAmD,YACjDuC,gCAAoCD,EAApCC,aAkDFC,CAAgBH,EAAhBG,GACO,YA9Ce,SAACF,EAAD,GACxB,GACAb,WAAoB,YAClBzB,0BAA0B,IAA1BA,YAAmD,YACjDuC,mCAAuCD,EAAvCC,UAEFvC,0BAA0B,IAA1BA,YAAmD,YACjDuC,mCAAuCD,EAAvCC,aAwCAE,CAAkBJ,EAAlBI,MAED,CATHT,IA2EA,OAAOA,wCAhEa,WAClB,UACE,aACE,OACE,+BACEU,IAAKX,EACLY,UAAcC,EAAL,UACTC,MAAK,GAAKZ,EACVa,OAAM,GAAKb,EACXc,QAAO,aAAoBd,GAE3B,kCACEU,UAAcC,EAAL,iBACTI,GAAE,GAAKf,EAAU,EACjBgB,GAAE,GAAKhB,EAAU,EACjBiB,EAAC,GAAKjB,EAAU,EAChBkB,KAAMzB,GAAa,OACnB0B,OAAQzB,GAAe,OACvBC,YAAaA,GAAe,KAIpC,aACE,OACE,+BACEc,IAAKX,EACLY,UAAcC,EAAL,UACTC,MAAK,GAAKX,EACVY,OAAM,GAAKZ,EACXa,QAAO,aAAkBb,GAEzB,gCACEW,MAAK,GAAKX,EACVY,OAAM,GAAKZ,EACXiB,KAAMzB,GAAa,OACnB0B,OAAQzB,GAAe,OACvBC,YAAaA,GAAe,EAC5Be,UAAcC,EAAL,oBAIjB,QACE,OACE,+BACEF,IAAKX,EACLY,UAAcC,EAAL,UACTC,MAAK,GAAKZ,EACVa,OAAM,GAAKb,EACXc,QAAO,aAAoBd,GAE3B,kCACEU,UAAcC,EAAL,iBACTI,GAAE,GAAKf,EAAU,EACjBgB,GAAE,GAAKhB,EAAU,EACjBiB,EAAC,GAAKjB,EAAU,EAChBkB,KAAMzB,GAAa,OACnB0B,OAAQzB,GAAe,OACvBC,YAAaA,GAAe,MAOhByB,KCxGXC,G,MAtBH,WACV,OACE,kBAAC,WAAD,KACE,yBACEX,UAAU,aACVY,MAAO,CAAEV,MAAO,QAASC,OAAQ,QAASU,gBAAiB,SAE3D,mDAEF,kBAAC,EAAD,CACE/B,YAAa,CAAC,cACdC,UAAU,UACVC,YAAY,OACZC,YAAa,EACbC,aAAc,GACdL,MAAM,SACNZ,WAAY,QCfpB6C,IAASpD,OAAO,kBAAC,EAAD,MAASL,SAAS0D,eAAe,W","file":"static/js/main.4755f5e3.chunk.js","sourcesContent":["import { gsap } from 'gsap'\nimport { lerp, getMousePos } from './utils'\n\n// Track the mouse position\nlet mouse = { x: 0, y: 0 }\nwindow.addEventListener('mousemove', (ev) => (mouse = getMousePos(ev)))\n\nexport default class Cursor {\n  DOM: { el: any }\n  bounds: any\n  renderedStyles: {\n    tx: { previous: number; current: number; amt: number }\n    ty: { previous: number; current: number; amt: number }\n    scale: { previous: number; current: number; amt: number }\n    opacity: { previous: number; current: number; amt: number }\n  }\n\n  onMouseMoveEv: () => void\n  smoothness: number\n\n  constructor(el: SVGSVGElement, smootness: number) {\n    this.DOM = { el: el }\n    this.DOM.el.style.opacity = 0\n    this.smoothness = 0.2\n\n    this.bounds = this.DOM.el.getBoundingClientRect()\n\n    if (smootness > 1) this.smoothness = 1\n    else if (smootness < 0) this.smoothness = 0\n    else this.smoothness = smootness\n\n    this.renderedStyles = {\n      tx: { previous: 0, current: 0, amt: this.smoothness },\n      ty: { previous: 0, current: 0, amt: this.smoothness },\n      scale: { previous: 1, current: 1, amt: this.smoothness },\n      opacity: { previous: 1, current: 1, amt: this.smoothness }\n    }\n\n    this.onMouseMoveEv = () => {\n      this.renderedStyles.tx.previous = this.renderedStyles.tx.current =\n        mouse.x - this.bounds.width / 2\n      this.renderedStyles.ty.previous = this.renderedStyles.ty.previous =\n        mouse.y - this.bounds.height / 2\n      gsap.to(this.DOM.el, {\n        duration: 0.9,\n        ease: 'Power3.easeOut',\n        opacity: 1\n      })\n      requestAnimationFrame(() => this.render())\n      window.removeEventListener('mousemove', this.onMouseMoveEv)\n    }\n\n    window.addEventListener('mousemove', this.onMouseMoveEv)\n  }\n\n  enter = () => {\n    this.renderedStyles.scale.current = 4\n    this.renderedStyles.opacity.current = 0.2\n  }\n\n  leave = () => {\n    this.renderedStyles.scale.current = 1\n    this.renderedStyles.opacity.current = 1\n  }\n\n  render = () => {\n    this.renderedStyles.tx.current = mouse.x - this.bounds.width / 2\n    this.renderedStyles.ty.current = mouse.y - this.bounds.height / 2\n\n    for (const key in this.renderedStyles) {\n      this.renderedStyles[key].previous = lerp(\n        this.renderedStyles[key].previous,\n        this.renderedStyles[key].current,\n        this.renderedStyles[key].amt\n      )\n    }\n\n    this.DOM.el.style.transform = `translateX(${this.renderedStyles.tx.previous}px) translateY(${this.renderedStyles.ty.previous}px) scale(${this.renderedStyles.scale.previous})`\n    this.DOM.el.style.opacity = this.renderedStyles.opacity.previous\n\n    requestAnimationFrame(() => this.render())\n  }\n}\n","// Map number x from range [a, b] to [c, d]\nconst map = (x: number, a: number, b: number, c: number, d: number) =>\n  ((x - a) * (d - c)) / (b - a) + c\n\n// Linear interpolation\nconst lerp = (a: number, b: number, n: number) => (1 - n) * a + n * b\n\nconst calcWinsize = () => {\n  return { width: window.innerWidth, height: window.innerHeight }\n}\n\n// Gets the mouse position\nconst getMousePos = (e: any) => {\n  let posx = 0\n  let posy = 0\n  if (!e) e = window.event\n  if (e.pageX || e.pageY) {\n    posx = e.pageX\n    posy = e.pageY\n  } else if (e.clientX || e.clientY) {\n    posx =\n      e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft\n    posy =\n      e.clientY + document.body.scrollTop + document.documentElement.scrollTop\n  }\n\n  return { x: posx, y: posy }\n}\n\nconst distance = (x1: number, y1: number, x2: number, y2: number) => {\n  var a = x1 - x2\n  var b = y1 - y2\n\n  return Math.hypot(a, b)\n}\n\n// Generate a random float.\nconst getRandomFloat = (min: number, max: number) =>\n  (Math.random() * (max - min) + min).toFixed(2)\n\nexport { map, lerp, calcWinsize, getMousePos, distance, getRandomFloat }\n","import * as React from 'react'\nimport Cursor from './Cursor'\nimport styles from './styles.module.css'\n\nconst bindCursorEvent = (cursor: Cursor, bindClasses: string[]) => {\n  if (!bindClasses) return\n  bindClasses.forEach((bindClass) => {\n    document.querySelectorAll('.' + bindClass).forEach((item) => {\n      item.addEventListener('mouseenter', cursor.enter)\n    })\n    document.querySelectorAll('.' + bindClass).forEach((item) => {\n      item.addEventListener('mouseleave', cursor.leave)\n    })\n  })\n}\n\nconst unbindCursorEvent = (cursor: Cursor, bindClasses: string[]) => {\n  if (!bindClasses) return\n  bindClasses.forEach((bindClass) => {\n    document.querySelectorAll('.' + bindClass).forEach((item) => {\n      item.removeEventListener('mouseenter', cursor.enter)\n    })\n    document.querySelectorAll('.' + bindClass).forEach((item) => {\n      item.removeEventListener('mouseleave', cursor.leave)\n    })\n  })\n}\n\nexport interface SmoothCursorProps {\n  shape?: 'circle' | 'square'\n  bindClasses?: string[]\n  fillColor?: string\n  strokeColor?: string\n  strokeWidth?: number\n  smoothness?: number\n\n  circleRadius?: number\n  squareSize?: number\n}\n\nconst SmoothCursor = ({\n  shape,\n  bindClasses,\n  fillColor,\n  strokeColor,\n  strokeWidth,\n  circleRadius,\n  squareSize,\n  smoothness\n}: SmoothCursorProps) => {\n  const cursorRef = React.useRef<SVGSVGElement>()\n  const mRadius = circleRadius || 25\n  const mSize = squareSize || 25\n  const mShape = shape || 'circle'\n  const mSmoothness = smoothness || 0.2\n\n  React.useEffect(() => {\n    if (!cursorRef) return null\n\n    const mCursor = new Cursor(cursorRef.current, mSmoothness)\n\n    bindCursorEvent(mCursor, bindClasses)\n    return () => {\n      unbindCursorEvent(mCursor, bindClasses)\n    }\n  }, [cursorRef])\n\n  const renderShape = () => {\n    switch (mShape) {\n      case 'circle':\n        return (\n          <svg\n            ref={cursorRef}\n            className={`${styles.cursor} cursor`}\n            width={`${mRadius}`}\n            height={`${mRadius}`}\n            viewBox={`0 0 ${mRadius} ${mRadius}`}\n          >\n            <circle\n              className={`${styles.cursor} cursor__inner`}\n              cx={`${mRadius / 2}`}\n              cy={`${mRadius / 2}`}\n              r={`${mRadius / 4}`}\n              fill={fillColor || '#fff'}\n              stroke={strokeColor || '#000'}\n              strokeWidth={strokeWidth || 1}\n            />\n          </svg>\n        )\n      case 'square':\n        return (\n          <svg\n            ref={cursorRef}\n            className={`${styles.cursor} cursor`}\n            width={`${mSize}`}\n            height={`${mSize}`}\n            viewBox={`0 0 ${mSize} ${mSize}`}\n          >\n            <rect\n              width={`${mSize}`}\n              height={`${mSize}`}\n              fill={fillColor || '#fff'}\n              stroke={strokeColor || '#000'}\n              strokeWidth={strokeWidth || 1}\n              className={`${styles.cursor} cursor__inner`}\n            />\n          </svg>\n        )\n      default:\n        return (\n          <svg\n            ref={cursorRef}\n            className={`${styles.cursor} cursor`}\n            width={`${mRadius}`}\n            height={`${mRadius}`}\n            viewBox={`0 0 ${mRadius} ${mRadius}`}\n          >\n            <circle\n              className={`${styles.cursor} cursor__inner`}\n              cx={`${mRadius / 2}`}\n              cy={`${mRadius / 2}`}\n              r={`${mRadius / 4}`}\n              fill={fillColor || '#000'}\n              stroke={strokeColor || '#000'}\n              strokeWidth={strokeWidth || 1}\n            />\n          </svg>\n        )\n    }\n  }\n\n  return <React.Fragment>{renderShape()}</React.Fragment>\n}\n\nexport default SmoothCursor\n","import React, { Fragment } from 'react'\n\nimport SmoothCursor from 'react-smooth-cursor'\nimport 'react-smooth-cursor/dist/index.css'\n\nconst App = () => {\n  return (\n    <Fragment>\n      <div\n        className='playground'\n        style={{ width: '200px', height: '200px', backgroundColor: '#ddd' }}\n      >\n        <span>Move cursor here</span>\n      </div>\n      <SmoothCursor\n        bindClasses={['playground']}\n        fillColor='#e20c6a'\n        strokeColor='#000'\n        strokeWidth={1}\n        circleRadius={25}\n        shape='circle'\n        smoothness={0.2}\n      />\n    </Fragment>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}